####### Single-end Workflow ########

#By Alisha Quandt 5/2017
#If you have questions, start here: http://qiime.org/scripts/
#There is VERY good documentation for all qiime scripts and the multiple options (not all written out here) for each script at their website.
#I make generalized pipelines. That means I do not type out full paths (which change), and I do not write out exact file names except where I can (because they change). If you are confused, try to think about what the input and output for each script should be. If you are still confused visit the qiime documentation.
#Sometimes I forget to say "cd" into the directory that you just created.  I tried not to, but again if confused, think about what the input to your next script is, and where that is located. That will help you figure where in the file structure you will need to be.

---------------#Get reads and input fasta ready#
mkdir Read1
mv *R1_001.fastq.gz Read1/.

multiple_split_libraries_fastq.py -i Read1/ -o read1_fungi_split_libs/ -m sampleid_by_file -p parameters_split.txt   #See below for parameters used (q20)

#### parameters_split.txt content:
#qiime_parameters.txt

split_libraries_fastq:max_bad_run_length 3
split_libraries_fastq:sequence_max_n 0
split_libraries_fastq:phred_quality_threshold 19
split_libraries_fastq:min_per_read_length_fraction 0.75
split_libraries_fastq:max_barcode_errors 0

cd read1_fungi_split_libs/

---------------#Pick OTUs#                  *****From here workflow is same as paired end******

mv seqs.fna Fungal_read1_q20.fasta   #Rename your output to something more informative

pick_otus.py -i Fungal_read1_q20.fasta -m usearch -z --db_filepath=/path/to/SharedFolder/Unite/unite_97.fasta -o usearch_q20_read1 --word_length 64    ###This is the rate limiting step. It can take minutes to several hours depending on size of your dataset. Half of a MiSeq run took 4 hours.

cd /usearch_q20_read1/

pick_rep_set.py -i output_otus.txt -f ../Fungal_read1_q20.fasta -m most_abundant -o rep_set.fas     ##The input file here is the final file produced by pick_otus.py.  It always ends in "otus.txt" but is named by qiime according to your input file.

assign_taxonomy.py -i rep_set.fas -o Blast_unite97 -t /path/to/SharedFolder/Unite/unite_97.tax -r /path/to/SharedFolder/Unite/unite_97.fasta -m blast  ###You actually need to type out the path the to the Shared Folder and I have not written the exact text of the Unite directory or the 97 files. Use tab complete to locate these files and type exactly as found in file structure.

make_otu_table.py -i ../output_otus.txt -t taxon_assign.txt -o taxon_assign.biom

--------------#Visualize initial bar charts#

summarize_taxa.py -i taxon_assign.biom -a -L 2,3,4,5,6,7 -o taxonomy

cd taxonomy/

plot_taxa_summary.py -i ..L2.txt,..L3.txt,..etc -c bar    ##The input files (separated by commas) are the output text files from summarize_taxa.py
#Visualize .html file created

#You may want to re-visualize bar charts after filtering (see below). In that case run these two scripts again, but with your new .biom file.

---------------#Filtering#

filter_taxa_from_otu_table.py -i taxon_assign.biom -o Fungi_only.biom -p k__Fungi   ###Only give me things in Kingdom Fungi

filter_samples_from_otu_table.py -i Fungi_only.biom -o fung_only_min1000_taxon.biom -n 1000   ###Only keep samples that have at least 1000 sequences

---------------#Other analyses#

alpha_rarefaction.py -i fung_only_min1000_taxon.biom -m Conus_map_file.txt -o alpha_rare -p parameters_alpha.txt -e 15000 --min_rare_depth 10 -n 30   #Different parameters.txt file than the one above!!!!
#Visualize .html created wihtin output directory alpha_rare/plots/

#### parameters_alpha.txt content:
alpha_diversity:metrics observed_species,chao1,chao1_ci,simpson


alpha_diversity.py -i fung_only_min1000_taxon.biom -m chao1,observed_otus -o min1000_Alpha_div.txt  #This script calculates discrete stats for each sample.


#Beta Diversity
beta_diversity.py -i fung_only_min1000_taxon.biom -m bray_curtis -o Beta_div

cd Beta_div/

principal_coordinates.py -i bray_curtis_taxon_assign.txt -o beta_div_coords.txt

make_2d_plots.py -i beta_div_coords.txt -m ../Conus_map_file.txt
#Visualize .html created  within Beta_div/

make_emperor.py -i beta_div_coords.txt -m Conus_map_file.txt -o emperor_output
#Makes 3d emperor plot. Visualize .html created within emperor_output/
#Other options:
make_emperor.py -i beta_div_coords.txt -m Conus_map_file.txt --add_vectors Diet -o vecotrs
#Draws lines connecting samples of a given category.



